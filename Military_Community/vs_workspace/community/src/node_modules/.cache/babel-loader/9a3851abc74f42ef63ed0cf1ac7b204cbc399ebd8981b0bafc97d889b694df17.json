{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jangty\\\\Desktop\\\\miliHelper\\\\Military_Community\\\\vs_workspace\\\\community\\\\src\\\\pages\\\\Comment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"./Comment.css\";\nimport axios from 'axios';\nimport CommentList from \"./CommentList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = props => {\n  _s();\n  const [replier, setReplier] = useState(\"익명\"); // 작성자 : 익명으로 initialize\n  const [comment, setComment] = useState(\"\"); // 댓글\n  const [comment_list, setCommentList] = useState([]); // 댓글들의 리스트(목록)값 저장 \n  const [date, setDate] = useState(\"\"); // 작성날짜\n  const [isValid, setIsVaild] = useState(false); // 댓글을 올바르게 작성하였는지 검사\n  const copyCommentList = [...comment_list]; // '...' : 전개 연산자 사용 -> 1차원의 요소들만 배열로 저장하고 싶을 때 사용 \n  const [dt_list, setDt_list] = useState([]);\n  const Registration = async () => {\n    try {\n      const header = {\n        'Content-type': 'application/json; charset = utf-8',\n        Accept: 'application/json'\n      };\n      const datas = {\n        id: props.gid,\n        comment: comment\n      };\n      axios.post('http://localhost:8000/replyList/', datas, {\n        header\n      }).then(response => {\n        const res = response.data;\n        if (res.responseCode) {\n          // const resdt = res.responseData;\n          // // 여기서 resdt.id는 댓글을 다려고 하는 컨텐츠 테이블의 값이 대입되어 있음\n          // // --> id값이 같은 컨텐츠 테이블(내용 테이블)에 대한 댓글만 볼 수 있도록 함\n          // copyCommentList.push(resdt.comment);\n          alert(res.message);\n        } else {\n          alert(res.message); // 서버 오류\n        }\n      });\n    } catch (e) {\n      alert(\"서버 에러\");\n    } finally {\n      setComment(\"\"); // 댓글 등록 후 댓글 작성 textarea는 빈문자열로 초기화\n      window.location.reload();\n    }\n  };\n  const Review = async () => {\n    const header = {\n      \"Content-type\": \"application/json; charset=utf-8\",\n      Accept: \"application/json\"\n    };\n    const datas = {\n      id: props.gid\n    };\n    console.log(props.gid + \"dsda\");\n    axios.post('http://localhost:8000/review/', datas, {\n      header\n    }).then(response => {\n      const res = response.data;\n      console.log(res.responseCode);\n      if (res.responseCode) {\n        const resdt = res.responseData;\n        // console.log(\"ddd\");\n        setDt_list(resdt.reply_list); // 댓글에 관한 객체를 리스트에 저장\n        // copyCommentList.push(resdt.comment);\n        // setCommentList(copyCommentList);\n      }\n    }).catch(response => {\n      alert(response.data.message);\n    });\n  };\n  useEffect(() => {\n    // 데이터 가져오기를 위해 사용한 hook\n    console.log(\"useEffect_reply\");\n    Review(); //page가 변경되면 댓글 목록 요청\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"tb_comm\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [dt_list.map((data, i) => {\n            console.log(data);\n            return /*#__PURE__*/_jsxDEV(CommentList, {\n              replier: replier,\n              data: data\n            }, i + 1, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colspan: \"2\",\n              className: \"reply_title\",\n              children: \"\\uB313\\uAE00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"reply_comm\",\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"txtarea\",\n                type: \"text\",\n                placeholder: \"\\uB313\\uAE00 \\uB2EC\\uAE30..\",\n                name: \"comment\",\n                onChange: e => {\n                  setComment(e.target.value);\n                } // 텍스트를 입력하는 곳이 변하면 입력한 텍스트 값을 comment 변수에 대입\n                ,\n                onKeyUp: e => {\n                  e.target.value.length > 0 ? setIsVaild(true) : setIsVaild(false);\n                } // 1글자 이상 입력하였다면 isValid를 true로 설정, 아니라면 false로 설정\n                ,\n                value: comment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"input\",\n                type: \"submit\",\n                value: \"\\uB4F1\\uB85D\",\n                onClick: Registration,\n                disabled: isValid ? false : true // 사용자가 아무것도 입력하지 않았을 경우 비활성화\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(Comment, \"odZ9Niu49KyKm/peLiIubNR6/Rw=\");\n_c = Comment;\nexport default Comment;\nvar _c;\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"names":["React","useState","useEffect","axios","CommentList","jsxDEV","_jsxDEV","Comment","props","_s","replier","setReplier","comment","setComment","comment_list","setCommentList","date","setDate","isValid","setIsVaild","copyCommentList","dt_list","setDt_list","Registration","header","Accept","datas","id","gid","post","then","response","res","data","responseCode","alert","message","e","window","location","reload","Review","console","log","resdt","responseData","reply_list","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","i","colspan","type","placeholder","name","onChange","target","value","onKeyUp","length","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/jangty/Desktop/miliHelper/Military_Community/vs_workspace/community/src/pages/Comment.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./Comment.css\";\r\nimport axios from 'axios'\r\nimport CommentList from \"./CommentList\";\r\nconst Comment = (props)=>{\r\n\r\n    const [replier, setReplier] = useState(\"익명\"); // 작성자 : 익명으로 initialize\r\n    const [comment, setComment] = useState(\"\"); // 댓글\r\n    const [comment_list, setCommentList] = useState([]); // 댓글들의 리스트(목록)값 저장 \r\n    const [date, setDate] = useState(\"\");// 작성날짜\r\n    const [isValid, setIsVaild] = useState(false); // 댓글을 올바르게 작성하였는지 검사\r\n    const copyCommentList = [...comment_list]; // '...' : 전개 연산자 사용 -> 1차원의 요소들만 배열로 저장하고 싶을 때 사용 \r\n    const [dt_list, setDt_list] = useState([]); \r\n\r\n    const Registration = async() => {\r\n        try{\r\n            const header = {\r\n                'Content-type': 'application/json; charset = utf-8',\r\n                Accept : 'application/json',\r\n            };\r\n\r\n            const datas = {\r\n                id:props.gid,\r\n                comment:comment,\r\n            };\r\n\r\n            axios.post('http://localhost:8000/replyList/', datas, {\r\n                header,\r\n            }).then((response) => {\r\n                const res = response.data;\r\n                if(res.responseCode){\r\n                        // const resdt = res.responseData;\r\n                        // // 여기서 resdt.id는 댓글을 다려고 하는 컨텐츠 테이블의 값이 대입되어 있음\r\n                        // // --> id값이 같은 컨텐츠 테이블(내용 테이블)에 대한 댓글만 볼 수 있도록 함\r\n                        // copyCommentList.push(resdt.comment);\r\n                        alert(res.message);\r\n                }else{ \r\n                    alert(res.message) // 서버 오류\r\n                }\r\n            })\r\n        }catch(e){\r\n            alert(\"서버 에러\")\r\n        }finally{\r\n            setComment(\"\"); // 댓글 등록 후 댓글 작성 textarea는 빈문자열로 초기화\r\n            window.location.reload();\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    const Review = async() => {\r\n        const header = {\r\n            \"Content-type\" : \"application/json; charset=utf-8\",\r\n            Accept : \"application/json\"\r\n        }\r\n\r\n        const datas = {\r\n            id : props.gid\r\n        }\r\n       console.log(props.gid+\"dsda\")\r\n        axios.post('http://localhost:8000/review/', datas, {\r\n            header,\r\n        }).then((response)=>{\r\n            const res = response.data;\r\n            console.log(res.responseCode);\r\n            if(res.responseCode) {\r\n                const resdt = res.responseData;\r\n                // console.log(\"ddd\");\r\n                setDt_list(resdt.reply_list); // 댓글에 관한 객체를 리스트에 저장\r\n                // copyCommentList.push(resdt.comment);\r\n                // setCommentList(copyCommentList);\r\n            }\r\n        }).catch(\r\n            (response) => {\r\n                alert(response.data.message)\r\n            }\r\n        );\r\n    }\r\n\r\n    useEffect(()=>{ // 데이터 가져오기를 위해 사용한 hook\r\n        console.log(\"useEffect_reply\");\r\n        Review();//page가 변경되면 댓글 목록 요청\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <br />\r\n                <table className = \"tb_comm\">\r\n                    <tbody>\r\n                    {\r\n                        dt_list.map((data, i) =>{\r\n                            console.log(data)\r\n                            return (\r\n                                <CommentList replier = {replier} data = {data} key={i + 1} />\r\n                            )\r\n                        })\r\n                    }\r\n                        {/*댓글 목록 코드 작성 */}\r\n                    <tr>\r\n                        <td colspan = \"2\" className = \"reply_title\">\r\n                            댓글\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className = \"reply_comm\">\r\n                            <textarea \r\n                            className = \"txtarea\" \r\n                            type=\"text\" \r\n                            placeholder = \"댓글 달기..\" \r\n                            name=\"comment\"\r\n                            onChange={(e)=>{\r\n                                setComment(e.target.value)\r\n                            }}// 텍스트를 입력하는 곳이 변하면 입력한 텍스트 값을 comment 변수에 대입\r\n                            onKeyUp = {\r\n                                (e)=>{\r\n                                    e.target.value.length>0 ? setIsVaild(true):setIsVaild(false)\r\n                                }\r\n                            } // 1글자 이상 입력하였다면 isValid를 true로 설정, 아니라면 false로 설정\r\n                            value={comment}\r\n                            />\r\n                            <input \r\n                            className=\"input\" \r\n                            type = \"submit\" \r\n                            value = \"등록\" \r\n                            onClick={Registration}\r\n                            disabled={isValid ? false:true} // 사용자가 아무것도 입력하지 않았을 경우 비활성화\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                    {/* <input \r\n                            className=\"input\" \r\n                            type = \"submit\" \r\n                            value = \"댓글 조회\" \r\n                            onClick={Review}\r\n                            disabled={isValid ? false:true} // 사용자가 아무것도 입력하지 않았을 경우 게시 x\r\n                    /> */}\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAO,eAAe;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxC,MAAMC,OAAO,GAAIC,KAAK,IAAG;EAAAC,EAAA;EAErB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACa,YAAY,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACrD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC;EACrC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAMmB,eAAe,GAAG,CAAC,GAAGN,YAAY,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMsB,YAAY,GAAG,MAAAA,CAAA,KAAW;IAC5B,IAAG;MACC,MAAMC,MAAM,GAAG;QACX,cAAc,EAAE,mCAAmC;QACnDC,MAAM,EAAG;MACb,CAAC;MAED,MAAMC,KAAK,GAAG;QACVC,EAAE,EAACnB,KAAK,CAACoB,GAAG;QACZhB,OAAO,EAACA;MACZ,CAAC;MAEDT,KAAK,CAAC0B,IAAI,CAAC,kCAAkC,EAAEH,KAAK,EAAE;QAClDF;MACJ,CAAC,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;QACzB,IAAGD,GAAG,CAACE,YAAY,EAAC;UACZ;UACA;UACA;UACA;UACAC,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC;QAC1B,CAAC,MAAI;UACDD,KAAK,CAACH,GAAG,CAACI,OAAO,CAAC,EAAC;QACvB;MACJ,CAAC,CAAC;IACN,CAAC,QAAMC,CAAC,EAAC;MACLF,KAAK,CAAC,OAAO,CAAC;IAClB,CAAC,SAAO;MACJtB,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MAChByB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC5B;EAGJ,CAAC;EAED,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAW;IACtB,MAAMjB,MAAM,GAAG;MACX,cAAc,EAAG,iCAAiC;MAClDC,MAAM,EAAG;IACb,CAAC;IAED,MAAMC,KAAK,GAAG;MACVC,EAAE,EAAGnB,KAAK,CAACoB;IACf,CAAC;IACFc,OAAO,CAACC,GAAG,CAACnC,KAAK,CAACoB,GAAG,GAAC,MAAM,CAAC;IAC5BzB,KAAK,CAAC0B,IAAI,CAAC,+BAA+B,EAAEH,KAAK,EAAE;MAC/CF;IACJ,CAAC,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAG;MAChB,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;MACzBS,OAAO,CAACC,GAAG,CAACX,GAAG,CAACE,YAAY,CAAC;MAC7B,IAAGF,GAAG,CAACE,YAAY,EAAE;QACjB,MAAMU,KAAK,GAAGZ,GAAG,CAACa,YAAY;QAC9B;QACAvB,UAAU,CAACsB,KAAK,CAACE,UAAU,CAAC,CAAC,CAAC;QAC9B;QACA;MACJ;IACJ,CAAC,CAAC,CAACC,KAAK,CACHhB,QAAQ,IAAK;MACVI,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAC;IAChC,CACJ,CAAC;EACL,CAAC;EAEDlC,SAAS,CAAC,MAAI;IAAE;IACZwC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BF,MAAM,CAAC,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACInC,OAAA;IAAA0C,QAAA,eACI1C,OAAA;MAAA0C,QAAA,gBACI1C,OAAA;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN9C,OAAA;QAAO+C,SAAS,EAAG,SAAS;QAAAL,QAAA,eACxB1C,OAAA;UAAA0C,QAAA,GAEI3B,OAAO,CAACiC,GAAG,CAAC,CAACrB,IAAI,EAAEsB,CAAC,KAAI;YACpBb,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;YACjB,oBACI3B,OAAA,CAACF,WAAW;cAACM,OAAO,EAAIA,OAAQ;cAACuB,IAAI,EAAIA;YAAK,GAAMsB,CAAC,GAAG,CAAC;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAErE,CAAC,CAAC,eAGN9C,OAAA;YAAA0C,QAAA,eACI1C,OAAA;cAAIkD,OAAO,EAAG,GAAG;cAACH,SAAS,EAAG,aAAa;cAAAL,QAAA,EAAC;YAE5C;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACL9C,OAAA;YAAA0C,QAAA,eACI1C,OAAA;cAAI+C,SAAS,EAAG,YAAY;cAAAL,QAAA,gBACxB1C,OAAA;gBACA+C,SAAS,EAAG,SAAS;gBACrBI,IAAI,EAAC,MAAM;gBACXC,WAAW,EAAG,6BAAS;gBACvBC,IAAI,EAAC,SAAS;gBACdC,QAAQ,EAAGvB,CAAC,IAAG;kBACXxB,UAAU,CAACwB,CAAC,CAACwB,MAAM,CAACC,KAAK,CAAC;gBAC9B,CAAE;gBAAA;gBACFC,OAAO,EACF1B,CAAC,IAAG;kBACDA,CAAC,CAACwB,MAAM,CAACC,KAAK,CAACE,MAAM,GAAC,CAAC,GAAG7C,UAAU,CAAC,IAAI,CAAC,GAACA,UAAU,CAAC,KAAK,CAAC;gBAChE,CACH,CAAC;gBAAA;gBACF2C,KAAK,EAAElD;cAAQ;gBAAAqC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACd,CAAC,eACF9C,OAAA;gBACA+C,SAAS,EAAC,OAAO;gBACjBI,IAAI,EAAG,QAAQ;gBACfK,KAAK,EAAG,cAAI;gBACZG,OAAO,EAAE1C,YAAa;gBACtB2C,QAAQ,EAAEhD,OAAO,GAAG,KAAK,GAAC,IAAK,CAAC;cAAA;gBAAA+B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAA3C,EAAA,CA1IKF,OAAO;AAAA4D,EAAA,GAAP5D,OAAO;AA4Ib,eAAeA,OAAO;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}