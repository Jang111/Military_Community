{"ast":null,"code":"import React,{useState,useEffect}from'react';import\"./Comment.css\";import axios from'axios';import CommentList from\"./CommentList\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Comment=props=>{const[replier,setReplier]=useState(\"익명\");// 작성자 : 익명으로 initialize\nconst[comment,setComment]=useState(\"\");// 댓글\nconst[comment_list,setCommentList]=useState([]);// 댓글들의 리스트(목록)값 저장 \nconst[date,setDate]=useState(\"\");// 작성날짜\nconst[isValid,setIsVaild]=useState(false);// 댓글을 올바르게 작성하였는지 검사\nconst copyCommentList=[...comment_list];// '...' : 전개 연산자 사용 -> 1차원의 요소들만 배열로 저장하고 싶을 때 사용 \nconst[dt_list,setDt_list]=useState([]);const Registration=async()=>{try{const header={'Content-type':'application/json; charset = utf-8',Accept:'application/json'};const datas={id:props.gid,comment:comment};axios.post('http://localhost:8000/replyList/',datas,{header}).then(response=>{const res=response.data;if(res.responseCode){// const resdt = res.responseData;\n// // 여기서 resdt.id는 댓글을 다려고 하는 컨텐츠 테이블의 값이 대입되어 있음\n// // --> id값이 같은 컨텐츠 테이블(내용 테이블)에 대한 댓글만 볼 수 있도록 함\n// copyCommentList.push(resdt.comment);\nalert(res.message);}else{alert(res.message);// 서버 오류\n}});}catch(e){alert(\"서버 에러\");}finally{setComment(\"\");// 댓글 등록 후 댓글 작성 textarea는 빈문자열로 초기화\nwindow.location.reload();}};const Review=async()=>{const header={\"Content-type\":\"application/json; charset=utf-8\",Accept:\"application/json\"};const datas={id:props.gid};console.log(props.gid+\"dsda\");axios.post('http://localhost:8000/review/',datas,{header}).then(response=>{const res=response.data;console.log(res.responseCode);if(res.responseCode){const resdt=res.responseData;// console.log(\"ddd\");\nsetDt_list(resdt.reply_list);// 댓글에 관한 객체를 리스트에 저장\n// copyCommentList.push(resdt.comment);\n// setCommentList(copyCommentList);\n}}).catch(response=>{alert(response.data.message);});};useEffect(()=>{// 데이터 가져오기를 위해 사용한 hook\nconsole.log(\"useEffect_reply\");Review();//page가 변경되면 댓글 목록 요청\n},[]);return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"table\",{className:\"tb_comm\",children:/*#__PURE__*/_jsxs(\"tbody\",{children:[dt_list.map((data,i)=>{console.log(data);return/*#__PURE__*/_jsx(CommentList,{replier:replier,data:data},i+1);}),/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colspan:\"2\",className:\"reply_title\",children:\"\\uB313\\uAE00\"})}),/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsxs(\"td\",{className:\"reply_comm\",children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"txtarea\",type:\"text\",placeholder:\"\\uB313\\uAE00 \\uB2EC\\uAE30..\",name:\"comment\",onChange:e=>{setComment(e.target.value);}// 텍스트를 입력하는 곳이 변하면 입력한 텍스트 값을 comment 변수에 대입\n,onKeyUp:e=>{e.target.value.length>0?setIsVaild(true):setIsVaild(false);}// 1글자 이상 입력하였다면 isValid를 true로 설정, 아니라면 false로 설정\n,value:comment}),/*#__PURE__*/_jsx(\"input\",{className:\"input\",type:\"submit\",value:\"\\uB4F1\\uB85D\",onClick:Registration,disabled:isValid?false:true// 사용자가 아무것도 입력하지 않았을 경우 비활성화\n})]})})]})})]})});};export default Comment;","map":{"version":3,"names":["React","useState","useEffect","axios","CommentList","jsx","_jsx","jsxs","_jsxs","Comment","props","replier","setReplier","comment","setComment","comment_list","setCommentList","date","setDate","isValid","setIsVaild","copyCommentList","dt_list","setDt_list","Registration","header","Accept","datas","id","gid","post","then","response","res","data","responseCode","alert","message","e","window","location","reload","Review","console","log","resdt","responseData","reply_list","catch","children","className","map","i","colspan","type","placeholder","name","onChange","target","value","onKeyUp","length","onClick","disabled"],"sources":["C:/Users/jangty/Desktop/miliHelper/Military_Community/vs_workspace/community/src/pages/Comment.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport \"./Comment.css\";\r\nimport axios from 'axios'\r\nimport CommentList from \"./CommentList\";\r\nconst Comment = (props)=>{\r\n\r\n    const [replier, setReplier] = useState(\"익명\"); // 작성자 : 익명으로 initialize\r\n    const [comment, setComment] = useState(\"\"); // 댓글\r\n    const [comment_list, setCommentList] = useState([]); // 댓글들의 리스트(목록)값 저장 \r\n    const [date, setDate] = useState(\"\");// 작성날짜\r\n    const [isValid, setIsVaild] = useState(false); // 댓글을 올바르게 작성하였는지 검사\r\n    const copyCommentList = [...comment_list]; // '...' : 전개 연산자 사용 -> 1차원의 요소들만 배열로 저장하고 싶을 때 사용 \r\n    const [dt_list, setDt_list] = useState([]); \r\n\r\n    const Registration = async() => {\r\n        try{\r\n            const header = {\r\n                'Content-type': 'application/json; charset = utf-8',\r\n                Accept : 'application/json',\r\n            };\r\n\r\n            const datas = {\r\n                id:props.gid,\r\n                comment:comment,\r\n            };\r\n\r\n            axios.post('http://localhost:8000/replyList/', datas, {\r\n                header,\r\n            }).then((response) => {\r\n                const res = response.data;\r\n                if(res.responseCode){\r\n                        // const resdt = res.responseData;\r\n                        // // 여기서 resdt.id는 댓글을 다려고 하는 컨텐츠 테이블의 값이 대입되어 있음\r\n                        // // --> id값이 같은 컨텐츠 테이블(내용 테이블)에 대한 댓글만 볼 수 있도록 함\r\n                        // copyCommentList.push(resdt.comment);\r\n                        alert(res.message);\r\n                }else{ \r\n                    alert(res.message) // 서버 오류\r\n                }\r\n            })\r\n        }catch(e){\r\n            alert(\"서버 에러\")\r\n        }finally{\r\n            setComment(\"\"); // 댓글 등록 후 댓글 작성 textarea는 빈문자열로 초기화\r\n            window.location.reload();\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    const Review = async() => {\r\n        const header = {\r\n            \"Content-type\" : \"application/json; charset=utf-8\",\r\n            Accept : \"application/json\"\r\n        }\r\n\r\n        const datas = {\r\n            id : props.gid\r\n        }\r\n       console.log(props.gid+\"dsda\")\r\n        axios.post('http://localhost:8000/review/', datas, {\r\n            header,\r\n        }).then((response)=>{\r\n            const res = response.data;\r\n            console.log(res.responseCode);\r\n            if(res.responseCode) {\r\n                const resdt = res.responseData;\r\n                // console.log(\"ddd\");\r\n                setDt_list(resdt.reply_list); // 댓글에 관한 객체를 리스트에 저장\r\n                // copyCommentList.push(resdt.comment);\r\n                // setCommentList(copyCommentList);\r\n            }\r\n        }).catch(\r\n            (response) => {\r\n                alert(response.data.message)\r\n            }\r\n        );\r\n    }\r\n\r\n    useEffect(()=>{ // 데이터 가져오기를 위해 사용한 hook\r\n        console.log(\"useEffect_reply\");\r\n        Review();//page가 변경되면 댓글 목록 요청\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <br />\r\n                <table className = \"tb_comm\">\r\n                    <tbody>\r\n                    {\r\n                        dt_list.map((data, i) =>{\r\n                            console.log(data)\r\n                            return (\r\n                                <CommentList replier = {replier} data = {data} key={i + 1} />\r\n                            )\r\n                        })\r\n                    }\r\n                        {/*댓글 목록 코드 작성 */}\r\n                    <tr>\r\n                        <td colspan = \"2\" className = \"reply_title\">\r\n                            댓글\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className = \"reply_comm\">\r\n                            <textarea \r\n                            className = \"txtarea\" \r\n                            type=\"text\" \r\n                            placeholder = \"댓글 달기..\" \r\n                            name=\"comment\"\r\n                            onChange={(e)=>{\r\n                                setComment(e.target.value)\r\n                            }}// 텍스트를 입력하는 곳이 변하면 입력한 텍스트 값을 comment 변수에 대입\r\n                            onKeyUp = {\r\n                                (e)=>{\r\n                                    e.target.value.length>0 ? setIsVaild(true):setIsVaild(false)\r\n                                }\r\n                            } // 1글자 이상 입력하였다면 isValid를 true로 설정, 아니라면 false로 설정\r\n                            value={comment}\r\n                            />\r\n                            <input \r\n                            className=\"input\" \r\n                            type = \"submit\" \r\n                            value = \"등록\" \r\n                            onClick={Registration}\r\n                            disabled={isValid ? false:true} // 사용자가 아무것도 입력하지 않았을 경우 비활성화\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                    {/* <input \r\n                            className=\"input\" \r\n                            type = \"submit\" \r\n                            value = \"댓글 조회\" \r\n                            onClick={Review}\r\n                            disabled={isValid ? false:true} // 사용자가 아무것도 입력하지 않았을 경우 게시 x\r\n                    /> */}\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}